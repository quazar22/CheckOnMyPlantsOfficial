// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: feB2VQPNZahnY5LzQYmkWq
// Component: 3cVBCimcnG4Fg
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: D3qQhsVMSYbK2V/component
import Select from "../../Select"; // plasmic-import: _GSXdVTKgkaYcn/component
import Select__Option from "../../Select__Option"; // plasmic-import: TFgoN3cpR2kTNe/component
import TextInput from "../../TextInput"; // plasmic-import: B6C4ENEJH6xECw/component
import WateredButton from "../../WateredButton"; // plasmic-import: xcrnevIKtbTBx8/component
import WateringHistoryRow from "../../WateringHistoryRow"; // plasmic-import: f3zVHQIuzi6bP9/component

import { useScreenVariants as useScreenVariantsdlm0Dysy6Lxx5I } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Dlm0DYSY6Lxx5i/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_check_on_my_plants.module.css"; // plasmic-import: feB2VQPNZahnY5LzQYmkWq/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 3cVBCimcnG4Fg/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: eSGSw9n2uJitvZ/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: ZJB47fzC3K45TW/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: qvdtKmAE7Risam/icon
import EllipsessvgIcon from "./icons/PlasmicIcon__Ellipsessvg"; // plasmic-import: vq2CxTcG61TnBh/icon
import image31TYnmn3ZpOf8TOl from "./images/image31.jpeg"; // plasmic-import: tYnmn3zpOf8tOl/picture

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  accountButton?: p.Flex<typeof Button>;
  h1?: p.Flex<"h1">;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdlm0Dysy6Lxx5I()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root,
            "" as const
          )}
          onClick={"" as const}
        >
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rydAb)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__o4F7N)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ap5A2
                    )}
                  >
                    {"CheckOnMyPlants"}
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__cxxez)}
                  >
                    <Button
                      data-plasmic-name={"accountButton"}
                      data-plasmic-override={overrides.accountButton}
                      className={classNames(
                        "__wab_instance",
                        sty.accountButton
                      )}
                      waterButton={true}
                    >
                      {"Account"}
                    </Button>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.columns__pqxcQ)}>
              <div className={classNames(projectcss.all, sty.column__qrLtF)}>
                <Select
                  className={classNames("__wab_instance", sty.select__vvE3C)}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yQsUg
                      )}
                    >
                      {"Homes"}
                    </div>
                  }
                />
              </div>

              <div className={classNames(projectcss.all, sty.column__jALj)}>
                <Button
                  className={classNames("__wab_instance", sty.button__b3CIx)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qWAj
                    )}
                  >
                    {"Add Plant"}
                  </div>
                </Button>
              </div>

              {true ? (
                <div className={classNames(projectcss.all, sty.column__cOlJj)}>
                  <Select
                    className={classNames("__wab_instance", sty.select___2RwIh)}
                    placeholder={"Order by"}
                  />
                </div>
              ) : null}

              <div className={classNames(projectcss.all, sty.column__x0Lg9)}>
                {true ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__plbip)}
                  >
                    {"Filter"}
                  </Button>
                ) : null}
              </div>
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.columns__g2Pp7)}>
            <div className={classNames(projectcss.all, sty.column__lsbh3)}>
              <TextInput
                className={classNames("__wab_instance", sty.textInput__osRih)}
                showStartIcon={true}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__mj6E8)}>
              <TextInput
                className={classNames("__wab_instance", sty.textInput__zZcIl)}
                placeholder={"Frequency" as const}
                showStartIcon={true}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__ssMmB)}>
              <TextInput
                className={classNames("__wab_instance", sty.textInput__iTPf)}
                placeholder={"Left" as const}
                showStartIcon={true}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__jTj8L)} />

            <div className={classNames(projectcss.all, sty.column__v2FzK)} />

            <div className={classNames(projectcss.all, sty.column__hgXbj)}>
              <Button
                className={classNames("__wab_instance", sty.button__bRpK7)}
              >
                {"Apply Filter"}
              </Button>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__dv2B9)}>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__nsf1Z)}
              >
                <div className={classNames(projectcss.all, sty.column__qcjJ)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ts377)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: image31TYnmn3ZpOf8TOl,
                      fullWidth: 1280,
                      fullHeight: 853,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__j7HPf)}>
                  <div
                    className={classNames(projectcss.all, sty.columns__myApw)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__cXycO)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ny5Ux
                        )}
                      >
                        {"Plant #1"}
                      </div>
                    </div>

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__y1Oqv
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xwMd
                            )}
                          >
                            {"Every 22 days"}
                          </div>
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__b72XU
                            )}
                          >
                            {"4 days left"}
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column__larZa)}>
                  <WateredButton
                    className={classNames(
                      "__wab_instance",
                      sty.wateredButton__mCqxn
                    )}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__svIey)}>
                  <EllipsessvgIcon
                    className={classNames(projectcss.all, sty.svg___7VvoI)}
                    role={"img"}
                  />
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__y0Iru)}
              >
                <div className={classNames(projectcss.all, sty.column__oRvpS)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__vScJd)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: image31TYnmn3ZpOf8TOl,
                      fullWidth: 1280,
                      fullHeight: 853,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__zhcM)}>
                  <div
                    className={classNames(projectcss.all, sty.columns__tMze)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__m9ToX)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yhj1Y
                        )}
                      >
                        {"Plant #1"}
                      </div>
                    </div>

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__jFqsi
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mjGYz
                            )}
                          >
                            {"Every 22 days"}
                          </div>
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8SUt
                            )}
                          >
                            {"4 days left"}
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column__c9RhX)}>
                  <WateredButton
                    className={classNames(
                      "__wab_instance",
                      sty.wateredButton__vZk4V
                    )}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__cVyjy)}>
                  <EllipsessvgIcon
                    className={classNames(projectcss.all, sty.svg__lVvV)}
                    role={"img"}
                  />
                </div>
              </p.Stack>
            ) : null}

            <div className={classNames(projectcss.all, sty.freeBox__kbhRn)}>
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__pGql4)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__g2OVh)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__ismt)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("100%" as const)
                          : ("100%" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100%" as const}
                      loading={"lazy" as const}
                      src={{
                        src: image31TYnmn3ZpOf8TOl,
                        fullWidth: 1280,
                        fullHeight: 853,
                        aspectRatio: undefined
                      }}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__zou4G)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__agakI)}
                    >
                      <div
                        className={classNames(projectcss.all, sty.column__uweI)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sMznl
                          )}
                        >
                          {"Plant #1"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aqFtA
                          )}
                        >
                          {"Kitchen Window"}
                        </div>
                      </div>

                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__uWv7W
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sYqqX
                              )}
                            >
                              {"Every 22 days"}
                            </div>
                          ) : null}
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wyNJg
                              )}
                            >
                              {"4 days left"}
                            </div>
                          ) : null}
                        </div>
                      ) : null}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__lnb33)}
                  >
                    <WateredButton
                      className={classNames(
                        "__wab_instance",
                        sty.wateredButton__iyA1V
                      )}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column___5Q5Jx)}
                  >
                    <EllipsessvgIcon
                      className={classNames(projectcss.all, sty.svg__upmGz)}
                      role={"img"}
                    />
                  </div>
                </p.Stack>
              ) : null}

              <div className={classNames(projectcss.all, sty.freeBox__sb36I)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z8Uju
                  )}
                >
                  {"Plant Info"}
                </div>

                <div
                  className={classNames(projectcss.all, sty.columns___5L5MS)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__rztyQ)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kkLs
                        )}
                      >
                        {"Name"}
                      </div>
                    ) : null}

                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput__bmtrb
                      )}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__nuCqz)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qBzQc
                      )}
                    >
                      {"Frequency"}
                    </div>

                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput___7OZrU
                      )}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__qzCdo)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5LuRz
                        )}
                      >
                        {"Home"}
                      </div>
                    ) : null}

                    <Select
                      className={classNames(
                        "__wab_instance",
                        sty.select__fb670
                      )}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__m9AGx
                          )}
                        >
                          {"Select…"}
                        </div>
                      }
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__ejp8G)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pWzbK
                        )}
                      >
                        {"Picture"}
                      </div>
                    ) : null}

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__qaJtQ
                      )}
                    >
                      {"Picture..."}
                    </Button>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__eKIuS)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gzvkG
                        )}
                      >
                        {"Location"}
                      </div>
                    ) : null}

                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput__pBVi
                      )}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__okC1X)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__jo4F6
                      )}
                    >
                      {"Update"}
                    </Button>
                  </div>
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox__yUkVc)}
                />

                <div className={classNames(projectcss.all, sty.columns__zcZ6B)}>
                  <div
                    className={classNames(projectcss.all, sty.column__oa9Mu)}
                  >
                    <Select
                      className={classNames("__wab_instance", sty.select__gndw)}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5VaSa
                          )}
                        >
                          {"Show 5"}
                        </div>
                      }
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__tc7MA)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t0Heq
                      )}
                    >
                      {"History"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__t5Ib4)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__uUkRt
                      )}
                    >
                      {"Add"}
                    </Button>
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__tQx25)}>
                  <WateringHistoryRow
                    className={classNames(
                      "__wab_instance",
                      sty.wateringHistoryRow__guTLi
                    )}
                  />

                  <WateringHistoryRow
                    className={classNames(
                      "__wab_instance",
                      sty.wateringHistoryRow___278S
                    )}
                    onTime={"2d late"}
                  />

                  <WateringHistoryRow
                    className={classNames(
                      "__wab_instance",
                      sty.wateringHistoryRow__yix2K
                    )}
                    onTime={"1d early"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.columns__gZb)}>
                  <div className={classNames(projectcss.all, sty.column__n5Vk)}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__r9Xey)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__gE14K
                        )}
                      >
                        {"Prev"}
                      </Button>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fuW6V
                        )}
                      >
                        {"1 of 5"}
                      </div>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__n1Pf6
                        )}
                      >
                        {"Next"}
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {true ? (
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Welcome to your first page."}
            </h1>
          ) : null}
          {true ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lVbHe
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "If you haven't already done so, go back and learn the basics by going through the Plasmic Levels tutorial.\n\nIt's always easier to start from examples! Add a new page using a template—do this from the list of pages in the top left (the gray + button).\n\nOr press the big blue + button to start dragging items into this page.\n\nIntegrate this project into your codebase—press the "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Code"}
                </span>
                <React.Fragment>
                  {
                    " button in the top right and follow the quickstart instructions.\n\nJoin our Slack community (icon in bottom left) for help any time."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          ) : null}
          {true ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__f4SEd
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "If you haven't already done so, go back and learn the basics by going through the Plasmic Levels tutorial.\n\nIt's always easier to start from examples! Add a new page using a template—do this from the list of pages in the top left (the gray + button).\n\nOr press the big blue + button to start dragging items into this page.\n\nIntegrate this project into your codebase—press the "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Code"}
                </span>
                <React.Fragment>
                  {
                    " button in the top right and follow the quickstart instructions.\n\nJoin our Slack community (icon in bottom left) for help any time."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "accountButton", "h1"],
  accountButton: ["accountButton"],
  h1: ["h1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  accountButton: typeof Button;
  h1: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    accountButton: makeNodeComponent("accountButton"),
    h1: makeNodeComponent("h1"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
